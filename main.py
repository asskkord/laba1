import os
import asyncio
import logging
import requests
import yt_dlp
from aiogram import F, Router, types, Bot, Dispatcher
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–æ–∫–µ–Ω–æ–≤ API
IMAGE_TOKEN = "FJIuYF5ujpnZIxRtpcRUCYuCtpMjaP-RMwU_pc1UJx4"
TOKEN = '7414232508:AAEczCMQryhbnH3I1ufj9u5STIcv8_j6IGc'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
kb_main = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', callback_data='generate_image')],
    [InlineKeyboardButton(text="üé∂ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É", callback_data='find_music')],
    [InlineKeyboardButton(text="üîó –ì–¥–µ –ø—Ä–æ–µ–∫—Ç?", callback_data='urlOfGitHub')]
])

# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ FSM
class Form(StatesGroup):
    waiting_for_prompt = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    audio_get = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        f"–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å? ü§î",
        reply_markup=kb_main
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ GitHub
@router.callback_query(F.data == 'urlOfGitHub')
async def ret_to_mainkb(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('https://github.com/asskkord/laba1.git', reply_markup=kb_main)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def download_audio(sound: str) -> str:
    if not os.path.exists('downloads'):
        os.makedirs('downloads')  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç

    ydl_opts = {
        'format': 'bestaudio/best',
        'extractaudio': True,
        'audioformat': 'mp3',
        'outtmpl': f'downloads/{sound}.mp3',
    }

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            search_results = ydl.extract_info(f"ytsearch:{sound} –º—ç—à–∞–ø", download=True)
            if search_results['entries']:
                audio_file = f"downloads/{sound}.mp3"
                return audio_file if os.path.exists(audio_file) else None
            return None
    except Exception as e:
        logging.error(f"An error occurred: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É"
@router.callback_query(F.data == 'find_music')
async def transit_to_audio_func(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. üé∂")
    await state.set_state(Form.audio_get)
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Form.audio_get)
async def input_name_of_music(message: types.Message, state: FSMContext):
    audio_file = await download_audio(message.text)
    if audio_file and os.path.exists(audio_file):
        with open(audio_file, 'rb') as file:
            audio_byte_io = FSInputFile(audio_file)
            await state.clear()
            await message.answer_audio(
                audio=audio_byte_io,
                caption="–í–æ—Ç –∞—É–¥–∏–æ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.",
                reply_markup=kb_main
            )
        os.remove(audio_file)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—É–¥–∏–æ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
@router.callback_query(F.data == "generate_image")
async def handle_image_generation(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. üñº")
    await state.set_state(Form.waiting_for_prompt)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(Form.waiting_for_prompt)
async def process_image_query(message: Message, state: FSMContext):
    query = message.text.strip()
    image_url = fetch_image_url(query)

    if image_url:
        await message.answer_photo(
            photo=image_url,
            caption="–í–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.",
            reply_markup=kb_main
        )
    else:
        await message.reply(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=kb_main
        )
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ API Unsplash
def fetch_image_url(query: str) -> str:
    api_url = f"https://api.unsplash.com/photos/random?query={query}&client_id={IMAGE_TOKEN}"
    response = requests.get(api_url)
    response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
    data = response.json()
    return data.get("urls", {}).get("regular", "")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        asyncio.run(main())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
import os

from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import yt_dlp

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Bot, Dispatcher
import asyncio
import logging




TOKEN = '7414232508:AAEczCMQryhbnH3I1ufj9u5STIcv8_j6IGc'
IMAGE_API_URL = ''

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


router = Router()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞–∂–∞—Ç—å

# –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
kb_main = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text='üñºÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', callback_data='generate_image')],
    [InlineKeyboardButton(text="üé∂ –ù–∞–π—Ç–∏ –º—É–∑—ã–∫—É", callback_data='find_music')],
    [InlineKeyboardButton(text="üîó –ì–¥–µ –ø—Ä–æ–µ–∫—Ç?", callback_data='urlOfGitHub')]
])


# –ö–ª–∞—Å—Å –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ FSM
class Form(StatesGroup):
    waiting_for_prompt = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    audio_get = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        f"–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! üòä\n\n"
        f"–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Å–¥–µ–ª–∞—Ç—å? ü§î",
        reply_markup=kb_main
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ GitHub
@router.callback_query(F.data == 'urlOfGitHub')
async def ret_to_mainkb(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('https://github.com/asskkord/laba1.git', reply_markup=kb_main)


async def download_audio(anime_title):
    if not os.path.exists('downloads'):
        os.makedirs('downloads')  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç

    ydl_opts = {
        'format': 'bestaudio/best',
        'extractaudio': True,
        'audioformat': 'mp3',
        'outtmpl': f'downloads/{anime_title}.mp3',
    }

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º yt-dlp –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            search_results = ydl.extract_info(f"ytsearch:{anime_title} –º—ç—à–∞–ø", download=True)
            if search_results['entries']:
                audio_file = f"downloads/{anime_title}.mp3"
                return audio_file if os.path.exists(audio_file) else None
            else:
                return None
    except Exception as e:
        logging.error(f"An error occurred: {e}")
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "find a music"
@router.callback_query(F.data == 'find_music')
async def transitToAudioFunc(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞. üé∂"
    )
    await state.set_state(Form.audio_get)
    await callback_query.answer()


@router.message(Form.audio_get)
async def InputNameOfMusic(message: types.Message, state: FSMContext):
    audio_file = await download_audio(message.text)
    if audio_file and os.path.exists(audio_file):
        with open(audio_file, 'rb') as file:
            audio_byte_io = FSInputFile(audio_file)
            await state.clear()
            await message.answer_audio(audio_byte_io)
        os.remove(audio_file)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º—ç—à–∞–ø")


# –°–ª–æ–≤–∞—Ä—å —Å –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
images_dict = {
    "–≥–æ—Ä–∞": "images/mountain.jpg",
    "–ª–µ—Å": "images/forest.jpg",
    "—Ä–µ–∫–∞": "images/river.jpg"
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "Generate images"
@router.callback_query(F.data == 'generate_image')
async def gen_image_callback(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–≥–æ—Ä–∞, –ª–µ—Å, —Ä–µ–∫–∞). üñº"
    )
    await state.set_state(Form.waiting_for_prompt)
    await callback_query.answer()


@router.message(Form.waiting_for_prompt)
async def send_image(message: Message, state: FSMContext):
    image_name = message.text.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è

    if image_name in images_dict:
        image_path = images_dict[image_name]

        if os.path.exists(image_path):
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞ BufferedReader
            photo = types.FSInputFile(image_path)
            await message.answer_photo(photo)
            await message.answer(f'–í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_name}.')
        else:
            await message.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except:
        print("exit")
